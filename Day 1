#1 find missing numbers
arr=[1,22,44,60,90,100]
missing_elements=[item for item in range (arr[0], arr[-1]+1) if item not in arr]
print(missing_elements)

#2find duplicate number
l=[1,2,1,3,4,3,5,6,4,5]
l1=[ ]
for i in l:
 if i not in l1:
 l1.append(i)
 else:
 print(i,end=' ')
 
 #3largest and smallest numnber
 arr=[100,200,500,300,700,600]
print("min value:",min(arr))
print("max value:",max(arr))

#4find all pairs of integer
 print("pairs whose sum is:",sum)
 for i in range(len):
 for j in range(i, len):
 if (array [i]+array [j])==sum:
 print(array [i],array [j])
array=[4,5,6,1,7,3,8]
sum=9
print("Array=",array)
find (array,len (array),sum)

#5 find duplicate numbers in an array if it contains multiple duplicates
l=[1,2,1,3,4,3,5,6,4,5,6,5,3,2]
l1=[ ]
for i in l:
 if i not in l1:
 l1.append(i)
 else:
 print(i,end=' ')
 
#6 duplicates removed from a given array in Java
int[] temp = new int[n];
int j = 0;
for (int i=0; i<n-1; i++){
if (arr[i] != arr[i+1]){
temp[j++] = arr[i];
}
}
temp[j++] = arr[n-1];
for (int i=0; i<j; i++){
arr[i] = temp[i];
}
return j;
}
public static void main (String[] args) {
int arr[] = {10,20,20,30,30,40,50,50};
int length = arr.length;
length = removeDuplicateElements(arr, length);
for (int i=0; i<length; i++)
System.out.print(arr[i]+" ");
}
}

#7 integer array sorted in place using the quicksort algorithm
def partition(array, low, high):
 pivot = array[high]
i = low - 1
 for j in range(low, high):
if array[j] <= pivot:
 i = i + 1
 (array[i], array[j]) = (array[j], array[i])
(array[i + 1], array[high]) = (array[high], array[i + 1])
 return i + 1
def quickSort(array, low, high):
if low < high:
 pi = partition(array, low, high)
 quickSort(array, low, pi - 1)
 quickSort(array, pi + 1, high)
data = [1, 7, 4, 1, 10, 9, -2]
print("Unsorted Array")
print(data)
size = len(data)
quickSort(data, 0, size - 1)
print('Sorted Array in Ascending Order:')
print(data)

#8 remove duplicates from an array in place
class Solution(object):
 def removeDuplicates(self, nums):
 “””
 :type nums: List[int]
 :rtype: int
 """
 k=0
 for i in range(i+1,len(nums)-1):
 j=i+1
 for j in range(j+1,len(len(nums))):
 if nums[i] == nums[j]:
 del nums[j]
 len_list = nums
 return(len_list, nums)
 
#9  reverse an array in place in Java
 System.out.println("Original Array:");
 for(int i=0;i<intArray.length;i++)
 System.out.print(intArray[i] + " ");
 System.out.println();
 
#10  duplicates removed from an array without using any library
arr=[1,32,54,60,90,100]
missing_elements=[item for item in range (arr[0], arr[-1]+1) if item not in arr]
print(missing_elements)

#11 print duplicate characters from a string
string="characters"
duplicates=[]
for char in string:
 if string.count(char)>1:
 if char not in duplicates:
 duplicates.append(char)
print(*duplicates)

#12 check if two strings are anagrams of each other
s1="race"
s2="care"
if sorted(s1.lower())==sorted(s2.lower()):
 print("anagram")
else:
 print("not a anagram")
 
#13 print the first non-repeated character from a string 
str="characters"
for i in str:
 if i!=' ':
 if(str.count(i)==1):
 print(i,end=" ")

#14 string be reversed using recursion
def reverse_string(my_string):
 if len(my_string)==0:
 return my_string
 else:
 return reverse_string(my_string[1:]) + my_string[0]
my_str="tamil"
print(reverse_string (my_str))

#15 check if a string contains only digits
str="26567367"
x=str.isnumeric()
print(x)

#16 duplicate characters found in a string
string="characters"
duplicates=[]
for char in string:
 if string.count(char)>1:
 if char not in duplicates:
 duplicates.append(char)
print(*duplicates)

#17 count the number of vowels and consonants in a given string
vowels=['a','e','i','o','u']
str=("apple").lower()
v_ctr=0
c_ctr=0
for x in str:
 if x in vowels:
 v_ctr +=1
 elif x!= ' ':
 c_ctr +=1
print("vowels:",v_ctr)
print("consonant:",c_ctr)

#18 count the occurrence of a given character in a string
my_string="program"
my_char="r"
print(my_string.count(my_char))

#19 find all the permutations of a string
from itertools import permutations
words=[' ' . join(p) for p in permutations("pro")]
print(words)

#20  reverse words in a given sentence without using any library method
s="program"
reversed_string=' '.join(reversed (s))
print(reversed_string)
